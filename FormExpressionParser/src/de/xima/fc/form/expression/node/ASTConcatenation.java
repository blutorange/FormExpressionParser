/* Generated By:JJTree: Do not edit this line. ASTConcatenation.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.xima.fc.form.expression.node;

import de.xima.fc.form.expression.context.IEvaluationContext;
import de.xima.fc.form.expression.error.EvaluationException;
import de.xima.fc.form.expression.grammar.FormExpressionParser;
import de.xima.fc.form.expression.object.ALangObject;
import de.xima.fc.form.expression.util.EMethodName;

public class ASTConcatenation extends InfixNode {
	public ASTConcatenation(final int id) {
		super(id);
	}

	public ASTConcatenation(final FormExpressionParser p, final int id) {
		super(p, id);
	}

	@Override
	public ALangObject evaluate(final IEvaluationContext ec) throws EvaluationException {
		final MySimpleNode left = getLeft();
		final MySimpleNode right = getRight();
		final ALangObject leftObject = left.evaluate(ec);
		final ALangObject rightObject = right.evaluate(ec);
		return leftObject.evaluateInstanceMethod(EMethodName.PLUS.name, ec, rightObject);
	}
}
/* JavaCC - OriginalChecksum=404807225495e726e8fad7e301118791 (do not edit this line) */
