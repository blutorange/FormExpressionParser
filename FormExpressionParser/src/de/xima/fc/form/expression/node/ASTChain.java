/* Generated By:JJTree: Do not edit this line. ASTChain.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.xima.fc.form.expression.node;

import de.xima.fc.form.expression.context.IEvaluationContext;
import de.xima.fc.form.expression.error.EvaluationException;
import de.xima.fc.form.expression.grammar.FormExpressionParser;
import de.xima.fc.form.expression.grammar.Node;
import de.xima.fc.form.expression.grammar.ParseException;
import de.xima.fc.form.expression.object.ALangObject;

public
@SuppressWarnings("all")
class ASTChain extends ASTParenthesesFunction {
	private FunctionCallNode[] chain;
	private MySimpleNode start;

	public ASTChain(final int id) {
		super(id);

	}

	public ASTChain(final FormExpressionParser p, final int id) {
		super(p, id);
	}

	@Override
	public ALangObject evaluate(final IEvaluationContext ec) throws EvaluationException {
		ALangObject result = start.evaluate(ec);
		for (int i = 0; i != chain.length; ++i)
			result = chain[i].chain(result, ec);
		return result;
	}

	public void init() throws ParseException {
		if (children == null) throw new ParseException("children are null");
		if (children.length < 2) throw new ParseException("chain of less than 2 elements");
		if (!(children[0] instanceof MySimpleNode)) throw new ParseException("node not the correct type: " + children[0]);
		start = (MySimpleNode)children[0];
		chain = new FunctionCallNode[children.length-1];
		for (int i = 1; i < children.length; ++i) {
			final Node n = children[i];
			if (!(n instanceof FunctionCallNode)) throw new ParseException("node not the correct type: " + n.getClass());
			chain[i-1] = (FunctionCallNode)children[i];
		}
	}
}
/* JavaCC - OriginalChecksum=218f9e8d1cb80c907a485a2d207ef6fd (do not edit this line) */
