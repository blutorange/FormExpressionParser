package de.xima.fc.form.expression.visitor;

import javax.annotation.Nonnull;

import de.xima.fc.form.expression.node.ASTArrayNode;
import de.xima.fc.form.expression.node.ASTAssignmentExpressionNode;
import de.xima.fc.form.expression.node.ASTBooleanNode;
import de.xima.fc.form.expression.node.ASTBreakClauseNode;
import de.xima.fc.form.expression.node.ASTComparisonExpressionNode;
import de.xima.fc.form.expression.node.ASTContinueClauseNode;
import de.xima.fc.form.expression.node.ASTDoWhileLoopNode;
import de.xima.fc.form.expression.node.ASTEmptyNode;
import de.xima.fc.form.expression.node.ASTEqualExpressionNode;
import de.xima.fc.form.expression.node.ASTExceptionNode;
import de.xima.fc.form.expression.node.ASTExpressionNode;
import de.xima.fc.form.expression.node.ASTForLoopNode;
import de.xima.fc.form.expression.node.ASTFunctionClauseNode;
import de.xima.fc.form.expression.node.ASTFunctionNode;
import de.xima.fc.form.expression.node.ASTHashNode;
import de.xima.fc.form.expression.node.ASTIdentifierNameNode;
import de.xima.fc.form.expression.node.ASTIfClauseNode;
import de.xima.fc.form.expression.node.ASTLogNode;
import de.xima.fc.form.expression.node.ASTLosNode;
import de.xima.fc.form.expression.node.ASTNullNode;
import de.xima.fc.form.expression.node.ASTNumberNode;
import de.xima.fc.form.expression.node.ASTParenthesisExpressionNode;
import de.xima.fc.form.expression.node.ASTPostUnaryExpressionNode;
import de.xima.fc.form.expression.node.ASTPropertyExpressionNode;
import de.xima.fc.form.expression.node.ASTRegexNode;
import de.xima.fc.form.expression.node.ASTReturnClauseNode;
import de.xima.fc.form.expression.node.ASTScopeExternalNode;
import de.xima.fc.form.expression.node.ASTScopeGlobalNode;
import de.xima.fc.form.expression.node.ASTScopeManualNode;
import de.xima.fc.form.expression.node.ASTStatementListNode;
import de.xima.fc.form.expression.node.ASTStringNode;
import de.xima.fc.form.expression.node.ASTSwitchClauseNode;
import de.xima.fc.form.expression.node.ASTTernaryExpressionNode;
import de.xima.fc.form.expression.node.ASTThrowClauseNode;
import de.xima.fc.form.expression.node.ASTTryClauseNode;
import de.xima.fc.form.expression.node.ASTUnaryExpressionNode;
import de.xima.fc.form.expression.node.ASTVariableDeclarationNode;
import de.xima.fc.form.expression.node.ASTVariableNode;
import de.xima.fc.form.expression.node.ASTWhileLoopNode;
import de.xima.fc.form.expression.node.ASTWithClauseNode;

public interface IFormExpressionVoidVoidVisitor<E extends Throwable>
{
	public void visit(@Nonnull ASTExpressionNode node) throws E;
	public void visit(@Nonnull ASTAssignmentExpressionNode node) throws E;
	public void visit(@Nonnull ASTNumberNode node) throws E;
	public void visit(@Nonnull ASTArrayNode node) throws E;
	public void visit(@Nonnull ASTHashNode node) throws E;
	public void visit(@Nonnull ASTNullNode node) throws E;
	public void visit(@Nonnull ASTBooleanNode node) throws E;
	public void visit(@Nonnull ASTVariableNode node) throws E;
	public void visit(@Nonnull ASTStringNode node) throws E;
	public void visit(@Nonnull ASTStatementListNode node) throws E;
	public void visit(@Nonnull ASTIfClauseNode node) throws E;
	public void visit(@Nonnull ASTForLoopNode node) throws E;
	public void visit(@Nonnull ASTWhileLoopNode node) throws E;
	public void visit(@Nonnull ASTTryClauseNode node) throws E;
	public void visit(@Nonnull ASTSwitchClauseNode node) throws E;
	public void visit(@Nonnull ASTDoWhileLoopNode node) throws E;
	public void visit(@Nonnull ASTExceptionNode node) throws E;
	public void visit(@Nonnull ASTThrowClauseNode node) throws E;
	public void visit(@Nonnull ASTBreakClauseNode node) throws E;
	public void visit(@Nonnull ASTContinueClauseNode node) throws E;
	public void visit(@Nonnull ASTReturnClauseNode node) throws E;
	public void visit(@Nonnull ASTLogNode node) throws E;
	public void visit(@Nonnull ASTFunctionNode node) throws E;
	public void visit(@Nonnull ASTUnaryExpressionNode node) throws E;
	public void visit(@Nonnull ASTPropertyExpressionNode node) throws E;
	public void visit(@Nonnull ASTIdentifierNameNode node) throws E;
	public void visit(@Nonnull ASTWithClauseNode node) throws E;
	public void visit(@Nonnull ASTFunctionClauseNode node) throws E;
	public void visit(@Nonnull ASTEmptyNode node) throws E;
	public void visit(@Nonnull ASTLosNode node) throws E;
	public void visit(@Nonnull ASTRegexNode node) throws E;
	public void visit(@Nonnull ASTTernaryExpressionNode node) throws E;
	public void visit(@Nonnull ASTParenthesisExpressionNode node) throws E;
	public void visit(@Nonnull ASTEqualExpressionNode node) throws E;
	public void visit(@Nonnull ASTPostUnaryExpressionNode node) throws E;
	public void visit(@Nonnull ASTComparisonExpressionNode node) throws E;
	public void visit(@Nonnull ASTScopeExternalNode node) throws E;
	public void visit(@Nonnull ASTVariableDeclarationNode node) throws E;
	public void visit(@Nonnull ASTScopeManualNode node) throws E;
	public void visit(@Nonnull ASTScopeGlobalNode node) throws E;
}
