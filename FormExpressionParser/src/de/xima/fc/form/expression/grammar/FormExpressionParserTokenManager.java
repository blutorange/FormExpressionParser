/* Generated By:JJTree&JavaCC: Do not edit this line. FormExpressionParserTokenManager.java */
package de.xima.fc.form.expression.grammar;
import java.lang.StringBuilder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import de.xima.fc.form.expression.impl.variable.ELangObjectClass;
import de.xima.fc.form.expression.impl.variable.VoidClass;
import de.xima.fc.form.expression.enums.EMethod;
import de.xima.fc.form.expression.enums.ELogLevel;
import de.xima.fc.form.expression.enums.EVariableTypeFlag;
import de.xima.fc.form.expression.iface.parse.IComment;
import de.xima.fc.form.expression.grammar.comment.CommentFactory;
import de.xima.fc.form.expression.util.CmnCnst;
import de.xima.fc.form.expression.util.NullUtil;
import de.xima.fc.form.expression.node.*;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.google.common.collect.ImmutableList;

/** Token Manager. */
@SuppressWarnings("all")
public class FormExpressionParserTokenManager implements FormExpressionParserConstants
{
  private int typeLevel = 0;
  private Token lastToken;
  private int countBraces = 0;
  private int[] stackTemplateLiteral = new int[4];
  private int posTemplateLiteral = -1;
  void CommonTokenAction(final Token token) {
    // Retrieve all comments, if there are any.
    lastToken = token;
    if (parser == null) return;
    Token special = token;
    if (token.specialToken != null) {
      while (special.specialToken != null) special = special.specialToken;
      while (special != null) {
        parser.addComment(special);
        special = special.next;
      }
    }
  }
  void pushTemplateLiteral() {
    if (posTemplateLiteral + 1 >= stackTemplateLiteral.length)
      stackTemplateLiteral = Arrays.copyOf(stackTemplateLiteral, 2*(posTemplateLiteral+2));
    stackTemplateLiteral[++posTemplateLiteral] = countBraces;
  }

  void popTemplateLiteralIfMatching() {
    if (posTemplateLiteral >= 0 && stackTemplateLiteral[posTemplateLiteral] == countBraces) {
      SwitchTo(FormExpressionParserConstants.TEMPLATE_LITERAL);
      --posTemplateLiteral;
    }
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }

  /** The parser. */
  public FormExpressionParser parser = null;
private int jjMoveStringLiteralDfa0_6()
{
   return 1;
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80400000000L) != 0L || (active1 & 0x40L) != 0L)
            return 0;
         if ((active1 & 0xfffffffc000e0000L) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            return 5;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active1 & 0xfffffffc00000000L) != 0L || (active2 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active1 & 0xe0000L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active1 & 0xffffffe000000000L) != 0L || (active2 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 2;
            }
            return 5;
         }
         if ((active1 & 0x1c00000000L) != 0L)
            return 5;
         return -1;
      case 3:
         if ((active1 & 0xfffff00000000000L) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 3;
            return 5;
         }
         if ((active1 & 0xfe000000000L) != 0L)
            return 5;
         return -1;
      case 4:
         if ((active1 & 0xffe0000000000000L) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
            return 5;
         }
         if ((active1 & 0x1ff00000000000L) != 0L)
            return 5;
         return -1;
      case 5:
         if ((active1 & 0xf800000000000000L) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
            return 5;
         }
         if ((active1 & 0x7e0000000000000L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
            return 5;
         }
         if ((active1 & 0xf800000000000000L) != 0L)
            return 5;
         return -1;
      case 7:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 7;
            return 5;
         }
         if ((active2 & 0xfL) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x200500000L, 0x0L);
      case 37:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_5(0x2000000000000000L, 0x80L, 0x0L);
      case 38:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x500L, 0x0L);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x2008020L, 0x0L);
      case 43:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x5L, 0x0L);
      case 44:
         return jjStopAtPos(0, 54);
      case 45:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_5(0x0L, 0xaL, 0x0L);
      case 46:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x10L, 0x0L);
      case 47:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_5(0x400000000L, 0x40L, 0x0L);
      case 58:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_5(0x4000000000000000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 57);
      case 60:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x94800800L, 0x0L);
      case 61:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_5(0x8000000000000000L, 0x100210000L, 0x0L);
      case 62:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x69001000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 39);
      case 91:
         return jjStopAtPos(0, 52);
      case 93:
         return jjStopAtPos(0, 53);
      case 94:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x4000L, 0x0L);
      case 96:
         return jjStopAtPos(0, 60);
      case 97:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x1000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x800100000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x408000000000L, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x8000000000080000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x2004000000000L, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x8000400000000L, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x200000000000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x20000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x60000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x6000000000000000L, 0xcL);
      case 109:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x80000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x20080000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x1050000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x504000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x810800000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x41000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x202000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 50);
      case 124:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x2200L, 0x0L);
      case 125:
         return jjStopAtPos(0, 51);
      case 126:
         return jjStopAtPos(0, 47);
      default :
         return jjMoveNfa_5(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 42:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 43:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 45:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x10L, active2, 0L);
      case 58:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 60:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x94000000L, active2, 0L);
      case 61:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x300000000L, active2, 0L);
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x68000000L, active2, 0L);
      case 93:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x8429000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x90d0000000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_5(1, 82, 5);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0xa00000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x200004000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_5(1, 81, 5);
         break;
      case 111:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_5(1, 83, 5);
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x6800040400000000L, active2, 0xdL);
      case 114:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x3110800000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x20080000000000L, active2, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0L, active2, 0x10L);
      case 124:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 126:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, 0L, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         break;
      case 60:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_5(active1, 0x10000000L, active2, 0L);
      case 61:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 91);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 97);
         break;
      case 62:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_5(active1, 0x20000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_5(active1, 0L, active2, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa3_5(active1, 0x100000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_5(active1, 0x8000000000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_5(active1, 0x6010000000000000L, active2, 0xcL);
      case 105:
         return jjMoveStringLiteralDfa3_5(active1, 0x100240000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_5(active1, 0x8080000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_5(active1, 0x20000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_5(active1, 0L, active2, 0x3L);
      case 111:
         return jjMoveStringLiteralDfa3_5(active1, 0xa04000000000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_5(active1, 0x1000000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_5(2, 98, 5);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_5(2, 100, 5);
         return jjMoveStringLiteralDfa3_5(active1, 0x403800000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_5(active1, 0x2c000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_5(active1, 0xc0402000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_5(active1, 0x10000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_5(2, 99, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_5(1, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa3_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(1, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, 0L, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 93);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_5(active1, 0x8001100000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_5(active1, 0x220000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_5(active1, 0x400000000000L, active2, 0x2L);
      case 100:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 106, 5);
         return jjMoveStringLiteralDfa4_5(active1, 0L, active2, 0x8L);
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 102, 5);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 103, 5);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 104, 5);
         return jjMoveStringLiteralDfa4_5(active1, 0x10000000000000L, active2, 0x14L);
      case 104:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 101, 5);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 105, 5);
         return jjMoveStringLiteralDfa4_5(active1, 0x80000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_5(active1, 0x2400000000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 107, 5);
         return jjMoveStringLiteralDfa4_5(active1, 0x800200000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_5(active1, 0x2800000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_5(active1, 0x4000000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_5(active1, 0x8000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_5(active1, 0x100000000000000L, active2, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa4_5(active1, 0x1040000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_5(active1, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_5(2, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa4_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(2, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, 0L, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_5(active1, 0x4200000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_5(active1, 0x100000000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 109, 5);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 114, 5);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 115, 5);
         return jjMoveStringLiteralDfa5_5(active1, 0x820000000000000L, active2, 0x8L);
      case 104:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 110, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_5(active1, 0x1000000000000000L, active2, 0x1L);
      case 107:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 108, 5);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_5(active1, 0x2400000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_5(active1, 0x80000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_5(active1, 0L, active2, 0x10L);
      case 114:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 113, 5);
         return jjMoveStringLiteralDfa5_5(active1, 0x40000000000000L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa5_5(active1, 0L, active2, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa5_5(active1, 0x8000000000000000L, active2, 0L);
      case 119:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 111, 5);
         break;
      case 120:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 116, 5);
         break;
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 112, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_5(3, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa5_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(3, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, 0L, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_5(active1, 0x800000000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_5(active1, 0L, active2, 0x8L);
      case 100:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 119, 5);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_5(active1, 0x2000000000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 122, 5);
         break;
      case 104:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 120, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_5(active1, 0L, active2, 0x2L);
      case 108:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 121, 5);
         return jjMoveStringLiteralDfa6_5(active1, 0x8000000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 118, 5);
         return jjMoveStringLiteralDfa6_5(active1, 0L, active2, 0x1L);
      case 114:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 117, 5);
         return jjMoveStringLiteralDfa6_5(active1, 0x5000000000000000L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa6_5(active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_5(4, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa6_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(4, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, 0L, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 124, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_5(active1, 0L, active2, 0x10L);
      case 110:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 123, 5);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 126, 5);
         break;
      case 111:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 125, 5);
         return jjMoveStringLiteralDfa7_5(active1, 0L, active2, 0x6L);
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 127, 5);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_5(active1, 0L, active2, 0x9L);
      default :
         break;
   }
   return jjStartNfa_5(5, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa7_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(5, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_5(7, 128, 5);
         break;
      case 103:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_5(7, 131, 5);
         break;
      case 110:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_5(7, 129, 5);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_5(active2, 0x10L);
      case 114:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_5(7, 130, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_5(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_5(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_5(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 110:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_5(8, 132, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_5(7, 0L, 0L, active2);
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 39;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 134)
                        kind = 134;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10 && kind > 35)
                     kind = 35;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 13:
                  jjCheckNAddStates(11, 13);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 15:
                  if (curChar == 34 && kind > 137)
                     kind = 137;
                  break;
               case 16:
                  if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  break;
               case 18:
                  jjCheckNAddStates(8, 10);
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 20:
                  if (curChar == 39 && kind > 138)
                     kind = 138;
                  break;
               case 21:
                  if (curChar == 35)
                     jjCheckNAddStates(5, 7);
                  break;
               case 23:
                  jjCheckNAddStates(5, 7);
                  break;
               case 24:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 25:
                  if (curChar != 35)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddStates(0, 4);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 46)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(5);
                  break;
               case 1:
                  if (kind > 35)
                     kind = 35;
                  jjAddStates(14, 15);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  jjCheckNAddStates(11, 13);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 17:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  jjCheckNAddStates(8, 10);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 22:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  jjCheckNAddStates(5, 7);
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if ((0x8220000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjAddStates(14, 15);
                  break;
               case 13:
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(11, 13);
                  break;
               case 18:
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(8, 10);
                  break;
               case 23:
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(2, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 37)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x2000003000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar != 64)
                     break;
                  kind = 21;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_4(0x8000000L);
      case 96:
         return jjStopAtPos(0, 28);
      default :
         return jjMoveNfa_4(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 123:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 2:
                  if ((0xffffffefffffffffL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               case 1:
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xfffffffeefffffffL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddTwoStates(0, 2);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               case 2:
                  if ((0xfffffffeefffffffL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 2:
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x2000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x800000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 3);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 60:
         return jjStopAtPos(0, 1);
      case 62:
         return jjStopAtPos(0, 2);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0xa0L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x30L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x500L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(2, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x1500L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(3, 7);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 104:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(3, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         break;
      case 120:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(4, 9);
         break;
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         break;
      case 103:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         break;
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 19;
                  break;
               case 3:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  kind = 19;
                  jjAddStates(14, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjAddStates(14, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   28, 29, 30, 35, 36, 22, 24, 25, 17, 19, 20, 12, 14, 15, 1, 2, 
   9, 10, 33, 34, 37, 38, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\74", "\76", "\54", "\150\141\163\150", "\166\141\162", "\56\56\56", 
"\166\157\151\144", "\145\162\162\157\162", "\162\145\147\145\170", "\141\162\162\141\171", 
"\155\145\164\150\157\144", "\163\164\162\151\156\147", "\156\165\155\142\145\162", 
"\142\157\157\154\145\141\156", null, null, null, null, null, null, null, null, null, null, null, null, 
"\44\173", "\140", null, null, null, null, null, null, null, "\74", "\76", "\46", "\77", 
"\53", "\55", "\52", "\57", "\136", "\174", "\75", "\176", "\50", "\51", "\173", 
"\175", "\133", "\135", "\54", "\72", "\56", "\73", "\41", "\45", "\140", "\45\135", 
"\72\72", "\75\76", "\53\53", "\55\55", "\53\75", "\55\75", "\56\56\56", "\52\75", 
"\57\75", "\45\75", "\46\46", "\174\174", "\46\75", "\74\75", "\76\75", "\174\75", 
"\136\75", "\52\52", "\75\75", "\151\156", "\151\146", "\144\157", "\41\75", "\75\176", 
"\41\176", "\74\74", "\76\76", "\52\52\75", "\74\74\75", "\76\76\75", "\74\74\74\75", 
"\76\76\76\75", "\76\76\76", "\74\74\74", "\75\75\75", "\41\75\75", "\146\157\162", 
"\164\162\171", "\166\141\162", "\167\151\164\150", "\145\154\163\145", "\143\141\163\145", 
"\164\162\165\145", "\150\141\163\150", "\166\157\151\144", "\156\165\154\154", 
"\142\162\145\141\153", "\167\150\151\154\145", "\143\141\164\143\150", "\164\150\162\157\167", 
"\141\162\162\141\171", "\145\162\162\157\162", "\163\143\157\160\145", "\146\141\154\163\145", 
"\162\145\147\145\170", "\156\165\155\142\145\162", "\162\145\164\165\162\156", 
"\155\145\164\150\157\144", "\163\167\151\164\143\150", "\147\154\157\142\141\154", 
"\163\164\162\151\156\147", "\142\157\157\154\145\141\156", "\162\145\161\165\151\162\145", 
"\154\157\147\151\156\146\157", "\154\157\147\167\141\162\156", "\144\145\146\141\165\154\164", 
"\143\157\156\164\151\156\165\145", "\146\165\156\143\164\151\157\156", "\154\157\147\145\162\162\157\162", 
"\154\157\147\144\145\142\165\147", "\145\170\143\145\160\164\151\157\156", null, null, null, null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "TYPE",
   "LOS",
   "TYPE_MULTI_LINE_COMMENT",
   "MULTI_LINE_COMMENT",
   "TEMPLATE_LITERAL",
   "CODE",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, -1, 0, -1, 
   5, -1, 5, 5, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffff038607fffL, 0xffffffffffffffffL, 0xeffL, 
};
static final long[] jjtoSkip = {
   0xbc28f8000L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x802880000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x405100000L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[39];
private final int[] jjstateSet = new int[78];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;

/** Constructor with parser. */
public FormExpressionParserTokenManager(FormExpressionParser parserArg, SimpleCharStream stream){
   parser = parserArg;
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor with parser. */
public FormExpressionParserTokenManager(FormExpressionParser parserArg, SimpleCharStream stream, int lexState){
   this(parserArg, stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 39; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 6;
int defaultLexState = 6;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 22)
         {
            jjmatchedKind = 22;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 26)
         {
            jjmatchedKind = 26;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                            ++typeLevel;
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                             --typeLevel; if (typeLevel == 0) SwitchTo(FormExpressionParserConstants.CODE);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if (parser != null) parser.setCurrentEmbedmentContext(matchedToken.image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
    pushTemplateLiteral();
    ++countBraces;
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
    if (lastToken != null && lastToken.kind == FormExpressionParserConstants.Function) {
      typeLevel = 1;
      SwitchTo(FormExpressionParserConstants.TYPE);
    }
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
    ++countBraces;
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
    --countBraces;
    popTemplateLiteralIfMatching();
         break;
      case 105 :
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
                      typeLevel = 0;
         break;
      case 112 :
        image.append(jjstrLiteralImages[112]);
        lengthOfMatch = jjstrLiteralImages[112].length();
                        typeLevel = 0;
         break;
      case 119 :
        image.append(jjstrLiteralImages[119]);
        lengthOfMatch = jjstrLiteralImages[119].length();
                          typeLevel = 0;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
