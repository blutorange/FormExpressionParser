/* Generated By:JJTree&JavaCC: Do not edit this line. FormExpressionParserConstants.java */
package de.xima.fc.form.expression.grammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface FormExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TypeAngleOpen = 1;
  /** RegularExpression Id. */
  int TypeAngleClose = 2;
  /** RegularExpression Id. */
  int TypeComma = 3;
  /** RegularExpression Id. */
  int TypeHash = 4;
  /** RegularExpression Id. */
  int TypeVar = 5;
  /** RegularExpression Id. */
  int TypeTripleDot = 6;
  /** RegularExpression Id. */
  int TypeVoid = 7;
  /** RegularExpression Id. */
  int TypeError = 8;
  /** RegularExpression Id. */
  int TypeRegex = 9;
  /** RegularExpression Id. */
  int TypeArray = 10;
  /** RegularExpression Id. */
  int TypeMethod = 11;
  /** RegularExpression Id. */
  int TypeString = 12;
  /** RegularExpression Id. */
  int TypeNumber = 13;
  /** RegularExpression Id. */
  int TypeBoolean = 14;
  /** RegularExpression Id. */
  int TypeSingleLineComment = 19;
  /** RegularExpression Id. */
  int LosOpen = 21;
  /** RegularExpression Id. */
  int LosChar = 22;
  /** RegularExpression Id. */
  int TypeMultiLineComment = 23;
  /** RegularExpression Id. */
  int MultiLineComment = 25;
  /** RegularExpression Id. */
  int TemplateLiteralInlineOpen = 27;
  /** RegularExpression Id. */
  int TemplateLiteralClose = 28;
  /** RegularExpression Id. */
  int TemplateLiteralChars = 29;
  /** RegularExpression Id. */
  int SingleLineComment = 35;
  /** RegularExpression Id. */
  int AngleOpen = 36;
  /** RegularExpression Id. */
  int AngleClose = 37;
  /** RegularExpression Id. */
  int Ampersand = 38;
  /** RegularExpression Id. */
  int QuestionMark = 39;
  /** RegularExpression Id. */
  int Plus = 40;
  /** RegularExpression Id. */
  int Dash = 41;
  /** RegularExpression Id. */
  int Star = 42;
  /** RegularExpression Id. */
  int Slash = 43;
  /** RegularExpression Id. */
  int Circumflex = 44;
  /** RegularExpression Id. */
  int Bar = 45;
  /** RegularExpression Id. */
  int Equal = 46;
  /** RegularExpression Id. */
  int Tilde = 47;
  /** RegularExpression Id. */
  int ParenOpen = 48;
  /** RegularExpression Id. */
  int ParenClose = 49;
  /** RegularExpression Id. */
  int BracesOpen = 50;
  /** RegularExpression Id. */
  int BracesClose = 51;
  /** RegularExpression Id. */
  int BracketOpen = 52;
  /** RegularExpression Id. */
  int BracketClose = 53;
  /** RegularExpression Id. */
  int Comma = 54;
  /** RegularExpression Id. */
  int Colon = 55;
  /** RegularExpression Id. */
  int Dot = 56;
  /** RegularExpression Id. */
  int SemiColon = 57;
  /** RegularExpression Id. */
  int Exclamation = 58;
  /** RegularExpression Id. */
  int Percent = 59;
  /** RegularExpression Id. */
  int TemplateLiteralOpen = 60;
  /** RegularExpression Id. */
  int LosBodyClose = 61;
  /** RegularExpression Id. */
  int ScopeSeparator = 62;
  /** RegularExpression Id. */
  int LambdaArrow = 63;
  /** RegularExpression Id. */
  int DoublePlus = 64;
  /** RegularExpression Id. */
  int DoubleDash = 65;
  /** RegularExpression Id. */
  int PlusEqual = 66;
  /** RegularExpression Id. */
  int DashEqual = 67;
  /** RegularExpression Id. */
  int TripleDot = 68;
  /** RegularExpression Id. */
  int StarEqual = 69;
  /** RegularExpression Id. */
  int SlashEqual = 70;
  /** RegularExpression Id. */
  int PercentEqual = 71;
  /** RegularExpression Id. */
  int DoubleAmpersand = 72;
  /** RegularExpression Id. */
  int DoubleBar = 73;
  /** RegularExpression Id. */
  int AmpersandEqual = 74;
  /** RegularExpression Id. */
  int AngleOpenEqual = 75;
  /** RegularExpression Id. */
  int AngleCloseEqual = 76;
  /** RegularExpression Id. */
  int BarEqual = 77;
  /** RegularExpression Id. */
  int CircumflexEqual = 78;
  /** RegularExpression Id. */
  int DoubleStar = 79;
  /** RegularExpression Id. */
  int DoubleEqual = 80;
  /** RegularExpression Id. */
  int In = 81;
  /** RegularExpression Id. */
  int If = 82;
  /** RegularExpression Id. */
  int Do = 83;
  /** RegularExpression Id. */
  int ExclamationEqual = 84;
  /** RegularExpression Id. */
  int EqualTilde = 85;
  /** RegularExpression Id. */
  int ExclamationTilde = 86;
  /** RegularExpression Id. */
  int DoubleAngleOpen = 87;
  /** RegularExpression Id. */
  int DoubleAngleClose = 88;
  /** RegularExpression Id. */
  int DoubleStarEqual = 89;
  /** RegularExpression Id. */
  int DoubleAngleOpenEqual = 90;
  /** RegularExpression Id. */
  int DoubleAngleCloseEqual = 91;
  /** RegularExpression Id. */
  int TripleAngleOpenEqual = 92;
  /** RegularExpression Id. */
  int TripleAngleCloseEqual = 93;
  /** RegularExpression Id. */
  int TripleAngleOpen = 94;
  /** RegularExpression Id. */
  int TripleAngleClose = 95;
  /** RegularExpression Id. */
  int TripleEqual = 96;
  /** RegularExpression Id. */
  int ExclamationDoubleEqual = 97;
  /** RegularExpression Id. */
  int For = 98;
  /** RegularExpression Id. */
  int Try = 99;
  /** RegularExpression Id. */
  int Var = 100;
  /** RegularExpression Id. */
  int With = 101;
  /** RegularExpression Id. */
  int Else = 102;
  /** RegularExpression Id. */
  int Case = 103;
  /** RegularExpression Id. */
  int True = 104;
  /** RegularExpression Id. */
  int Hash = 105;
  /** RegularExpression Id. */
  int Void = 106;
  /** RegularExpression Id. */
  int Null = 107;
  /** RegularExpression Id. */
  int Break = 108;
  /** RegularExpression Id. */
  int While = 109;
  /** RegularExpression Id. */
  int Catch = 110;
  /** RegularExpression Id. */
  int Throw = 111;
  /** RegularExpression Id. */
  int Array = 112;
  /** RegularExpression Id. */
  int __Error = 113;
  /** RegularExpression Id. */
  int Scope = 114;
  /** RegularExpression Id. */
  int False = 115;
  /** RegularExpression Id. */
  int Regex = 116;
  /** RegularExpression Id. */
  int Number = 117;
  /** RegularExpression Id. */
  int Return = 118;
  /** RegularExpression Id. */
  int Method = 119;
  /** RegularExpression Id. */
  int Switch = 120;
  /** RegularExpression Id. */
  int Global = 121;
  /** RegularExpression Id. */
  int String = 122;
  /** RegularExpression Id. */
  int Boolean = 123;
  /** RegularExpression Id. */
  int Require = 124;
  /** RegularExpression Id. */
  int LogInfo = 125;
  /** RegularExpression Id. */
  int LogWarn = 126;
  /** RegularExpression Id. */
  int Default = 127;
  /** RegularExpression Id. */
  int Continue = 128;
  /** RegularExpression Id. */
  int Function = 129;
  /** RegularExpression Id. */
  int LogError = 130;
  /** RegularExpression Id. */
  int LogDebug = 131;
  /** RegularExpression Id. */
  int __Exception = 132;
  /** RegularExpression Id. */
  int Identifier = 133;
  /** RegularExpression Id. */
  int Integer = 134;
  /** RegularExpression Id. */
  int Float = 135;
  /** RegularExpression Id. */
  int EXPONENT = 136;
  /** RegularExpression Id. */
  int DoubleQuotedString = 137;
  /** RegularExpression Id. */
  int SingleQuotedString = 138;
  /** RegularExpression Id. */
  int BackslashQuotedRegex = 139;

  /** Lexical state. */
  int TYPE = 0;
  /** Lexical state. */
  int LOS = 1;
  /** Lexical state. */
  int TYPE_MULTI_LINE_COMMENT = 2;
  /** Lexical state. */
  int MULTI_LINE_COMMENT = 3;
  /** Lexical state. */
  int TEMPLATE_LITERAL = 4;
  /** Lexical state. */
  int CODE = 5;
  /** Lexical state. */
  int DEFAULT = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"<\"",
    "\">\"",
    "\",\"",
    "\"hash\"",
    "\"var\"",
    "\"...\"",
    "\"void\"",
    "\"error\"",
    "\"regex\"",
    "\"array\"",
    "\"method\"",
    "\"string\"",
    "\"number\"",
    "\"boolean\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<TypeSingleLineComment>",
    "\"/*\"",
    "<LosOpen>",
    "<LosChar>",
    "\"*/\"",
    "<token of kind 24>",
    "\"*/\"",
    "<token of kind 26>",
    "\"${\"",
    "\"`\"",
    "<TemplateLiteralChars>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"/*\"",
    "<SingleLineComment>",
    "\"<\"",
    "\">\"",
    "\"&\"",
    "\"?\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"|\"",
    "\"=\"",
    "\"~\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "\";\"",
    "\"!\"",
    "\"%\"",
    "\"`\"",
    "\"%]\"",
    "\"::\"",
    "\"=>\"",
    "\"++\"",
    "\"--\"",
    "\"+=\"",
    "\"-=\"",
    "\"...\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&&\"",
    "\"||\"",
    "\"&=\"",
    "\"<=\"",
    "\">=\"",
    "\"|=\"",
    "\"^=\"",
    "\"**\"",
    "\"==\"",
    "\"in\"",
    "\"if\"",
    "\"do\"",
    "\"!=\"",
    "\"=~\"",
    "\"!~\"",
    "\"<<\"",
    "\">>\"",
    "\"**=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"<<<=\"",
    "\">>>=\"",
    "\">>>\"",
    "\"<<<\"",
    "\"===\"",
    "\"!==\"",
    "\"for\"",
    "\"try\"",
    "\"var\"",
    "\"with\"",
    "\"else\"",
    "\"case\"",
    "\"true\"",
    "\"hash\"",
    "\"void\"",
    "\"null\"",
    "\"break\"",
    "\"while\"",
    "\"catch\"",
    "\"throw\"",
    "\"array\"",
    "\"error\"",
    "\"scope\"",
    "\"false\"",
    "\"regex\"",
    "\"number\"",
    "\"return\"",
    "\"method\"",
    "\"switch\"",
    "\"global\"",
    "\"string\"",
    "\"boolean\"",
    "\"require\"",
    "\"loginfo\"",
    "\"logwarn\"",
    "\"default\"",
    "\"continue\"",
    "\"function\"",
    "\"logerror\"",
    "\"logdebug\"",
    "\"exception\"",
    "<Identifier>",
    "<Integer>",
    "<Float>",
    "<EXPONENT>",
    "<DoubleQuotedString>",
    "<SingleQuotedString>",
    "<BackslashQuotedRegex>",
  };

}
