PARSER_BEGIN(FormExpressionParser)
package de.xima.fc.form.expression.grammar;
import de.xima.fc.form.expression.enums.EMethod;
import de.xima.fc.form.expression.enums.ELogLevel;
import org.apache.commons.lang3.StringUtils;
import de.xima.fc.form.expression.node.*;

/** Formcycle expression language.
    http://ramkulkarni.com/blog/handling-some-of-the-warnings-and-errors-generated-by-javacc/
 */
public class FormExpressionParser
{
  /** Main entry point. */
  public static void main(String args []) throws ParseException
  {
    System.out.println("Use as a library...");
  }
}

PARSER_END(FormExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

Node Program() #StatementListNode :
{
  jjtThis.setStartPosition(token);
}
{
  (    (Clause(null))+ | < EOF >
  )
  {
    jjtThis.init(null);
    jjtThis.setEndPosition(token);
    return jjtThis;
  }
}

void Clause(EMethod method) #void :
{
}
{
 (
    ForLoop(method)
  | IfClause(method)
  | WhileLoop(method)
  | SwitchClause(method)
  | TryClause(method)
  | WithClause(method)
  | ThrowClause(method)
  | BreakClause(method)
  | ContinueClause(method)
  | Statement(method, false)
  )
}

void WithClause(EMethod method) #WithClauseNode :
{
  jjtThis.setStartPosition(token);
}
{
  (
    < With > "(" (IdentifierName(null))+ ")" BlockOrClause(null)  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void ContinueClause(EMethod method) #ContinueClauseNode :
{
    Token t = null;
}
{
  (
    < Continue > [ t = < IDENTIFIER > ]";"
  )
  {
    jjtThis.init(method, t == null ? null : t.image);
    jjtThis.setEndPosition(token);
  }
}

void BreakClause(EMethod method) #BreakClauseNode :
{
  Token t = null;
  jjtThis.setStartPosition(token);
}
{
  (
    < Break > [ t = < IDENTIFIER > ]";"  )
  {
    jjtThis.init(method, t == null ? null : t.image);
    jjtThis.setEndPosition(token);
  }
}

void ThrowClause(EMethod method) #ThrowClauseNode :
{
  jjtThis.setStartPosition(token);
  
}
{
  (
    < Throw > Exception(null) ";"  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void SwitchClause(EMethod method) #SwitchClauseNode :
{
  jjtThis.setStartPosition(token);
}
{
  (
    < Switch > "(" Expression(null) ")" "{"
    (
      SwitchCase()
    )*
    [
      SwitchDefault()
    ]
    "}"
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void SwitchCase() #void :
{
}
{
  (
    (
      < Case > Expression(EMethod.SWITCHCASE) ":"
    )+
    (Clause(EMethod.SWITCHCLAUSE))+
  )
}

void SwitchDefault() #void :
{
}
{
  (    < Default > ":"
      (Clause(EMethod.SWITCHDEFAULT))+
  )
}

void TryClause(EMethod method) #TryClauseNode :
{
  Token t;
  jjtThis.setStartPosition(token);
}
{
  (
    < Try >
    (
      Block(null)
    )
    < Catch > "(" t = < IDENTIFIER > ")"
    (
      Block(null)
    )
  )
  {
    jjtThis.init(method, t == null ? null : t.image);
    jjtThis.setEndPosition(token);
  }
}

void DoWhileLoop(EMethod method) #DoWhileLoopNode :
{
  jjtThis.setStartPosition(token);
}
{
  (
    < Do >
    BlockOrClause(null)
    < While > "(" Expression(null) ")"
  )
  {
    jjtThis.init(method);
  }
}

void WhileLoop(EMethod method) #WhileLoopNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    < While > "(" Expression(null) ")"
    BlockOrClause(null)
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void ForLoop(EMethod method) #ForLoopNode :
{
  Token iteratingLoopVariable = null;
  jjtThis.setStartPosition(token);  
}
{
  (
    < For > "("
    (
      LOOKAHEAD(< IDENTIFIER > ":")
      (
        iteratingLoopVariable = < IDENTIFIER > ":" Expression(null)
      )
    |
      (
        StatementListCommaSeparated(null) ";" StatementListCommaSeparated(null) ";" StatementListCommaSeparated(null)
      )
    )
    ")"
    BlockOrClause(null)
  )
  {
    jjtThis.init(method, iteratingLoopVariable != null ? iteratingLoopVariable.image : null);
    jjtThis.setEndPosition(token);
  }
}

void IfClause(EMethod method) #IfClauseNode :
{
  jjtThis.setStartPosition(token);
}
{
  (
    < If >
    "(" Expression(null) ")" 
    BlockOrClause(null)
    [
      LOOKAHEAD(1)
      < Else > 
      BlockOrClause(null)
    ]
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void BlockOrClause(EMethod method) #void :
{
}
{
  LOOKAHEAD("{")
  Block(method)
| Clause(method)
}

void Block(EMethod method) #StatementListNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    "{"
    (
      (
        Clause(null)
      )*
    )
    "}"
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void StatementListCommaSeparated(EMethod method) #StatementListNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    (Expression(null))? ("," Expression(null))*
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

Node Statement(EMethod method, boolean createNode) #ExpressionNode(createNode) :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    (
      Expression(null) ";" | ";"
    )
  )
  {
    if (!createNode) return null;
    if (jjtThis.jjtGetNumChildren() > 0) jjtThis.init(method);
    jjtThis.setEndPosition(token);
    return jjtThis;
  }
}

void Expression(EMethod method) #void :
{
}
{
  EqualTypeExpression(method)
}

void EqualTypeExpression(EMethod method) #AssignmentExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    DoubleBarExpression(method)
    (
      (
        "=" DoubleBarExpression(EMethod.EQUAL)
      )
    |
      (
        "+=" DoubleBarExpression(EMethod.PLUS_EQUAL)
      )
    |
      (
        "-=" DoubleBarExpression(EMethod.DASH_EQUAL)
      )
    |
      (
        "**=" DoubleBarExpression(EMethod.DOUBLE_STAR_EQUAL)
      )
    |
      (
        "*=" DoubleBarExpression(EMethod.STAR_EQUAL)
      )
    |
      (
        "/=" DoubleBarExpression(EMethod.SLASH_EQUAL)
      )
    |
      (
        "%=" DoubleBarExpression(EMethod.PERCENT_EQUAL)
      )
    |
      (
        "<<=" DoubleBarExpression(EMethod.DOUBLE_ANGLE_OPEN_EQUAL)
      )
    |
      (
        ">>=" DoubleBarExpression(EMethod.DOUBLE_ANGLE_CLOSE_EQUAL)
      )
    |
      (
        "&&=" DoubleBarExpression(EMethod.DOUBLE_AMPERSAND_EQUAL)
      )
    |
      (
        "||=" DoubleBarExpression(EMethod.DOUBLE_BAR_EQUAL)
      )
    |
      (
        "&=" DoubleBarExpression(EMethod.AMPERSAND_EQUAL)
      )
    |
      (
        "^=" DoubleBarExpression(EMethod.CIRCUMFLEX_EQUAL)
      )
    |
      (
        "|=" DoubleBarExpression(EMethod.BAR_EQUAL)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method, this);
    jjtThis.setEndPosition(token);
  }
}

void DoubleBarExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    DoubleAmpersandExpression(method)
    (
      "||" DoubleAmpersandExpression(EMethod.DOUBLE_BAR)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void DoubleAmpersandExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    BarExpression(method)
    (
      "&&" BarExpression(EMethod.DOUBLE_AMPERSAND)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void BarExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    CircumflexExpression(method)
    (
      "|" CircumflexExpression(EMethod.BAR)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void CircumflexExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    AmpersandExpression(method)
    (
      "^" AmpersandExpression(EMethod.CIRCUMFLEX)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void AmpersandExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    DoubleEqualTypeExpression(method)
    (
      "&" DoubleEqualTypeExpression(EMethod.AMPERSAND)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void DoubleEqualTypeExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    AngleTypeExpression(method)
    (
      (
        "===" AngleTypeExpression(EMethod.TRIPLE_EQUAL)
      )
    |
      (
        "==" AngleTypeExpression(EMethod.DOUBLE_EQUAL)
      )
    |
      (
        "!=" AngleTypeExpression(EMethod.EXCLAMATION_EQUAL)
      )
    |
      (
        "!==" AngleTypeExpression(EMethod.EXCLAMATION_DOUBLE_EQUAL)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void AngleTypeExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    PlusLikeExpression(method)
    (
      (
        "<" PlusLikeExpression(EMethod.ANGLE_OPEN)
      )
    |
      (
        ">" PlusLikeExpression(EMethod.ANGLE_CLOSE)
      )
    |
      (
        "<=" PlusLikeExpression(EMethod.ANGLE_OPEN_EQUAL)
      )
    |
      (
        ">=" PlusLikeExpression(EMethod.ANGLE_CLOSE_EQUAL)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void PlusLikeExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    StarLikeExpression(method)
    (
      (
        "+" StarLikeExpression(EMethod.PLUS)
      )
    |
      (
        "-" StarLikeExpression(EMethod.DASH)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void StarLikeExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  DoubleStarExpression(method)
  (
    (
      (
        "*" DoubleStarExpression(EMethod.STAR)
      )
    |
      (
        "/" DoubleStarExpression(EMethod.SLASH)
      )
    |
      (
        "%" DoubleStarExpression(EMethod.PERCENT)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void DoubleStarExpression(EMethod method) #ExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode;
  jjtThis.setStartPosition(token);  
}
{
  (
    UnaryExpression(method)
    [
      "**" DoubleStarExpression(EMethod.DOUBLE_STAR)
    ]
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void UnaryExpression(EMethod method) #UnaryExpressionNode(unaryMethod != null) :
{
  EMethod unaryMethod = null;
  jjtThis.setStartPosition(token);  
}
{
  (
    (
      "++" UnaryExpression(method)
      {
        unaryMethod = EMethod.DOUBLE_PLUS_PREFIX;
      }
    )
  |
    (
      "--" UnaryExpression(method)
      {
        unaryMethod = EMethod.DOUBLE_DASH_PREFIX;
      }
    )
  |
    (
      "+" UnaryExpression(method)
      {
        unaryMethod = EMethod.PLUS_UNARY;
      }
    )
  |
    (
      "-" UnaryExpression(method)
      {
        unaryMethod = EMethod.DASH_UNARY;
      }
    )
  |
    (
      "!" UnaryExpression(method)
      {
        unaryMethod = EMethod.EXCLAMATION;
      }
    )
  |
    PropertyExpression(method)
  )
  {
    if (unaryMethod != null) jjtThis.init(method, unaryMethod);
    jjtThis.setEndPosition(token);
  }
}

void PropertyExpression(EMethod method) #PropertyExpressionNode(createNode = jjtree.nodeArity() > 1) :
{
  boolean createNode = true;
  jjtThis.setStartPosition(token);  
}
{
  (
    FunctionTypeUnaryExpression(method)
    (
      "." IdentifierName(EMethod.DOT)
    | "[" Expression(EMethod.BRACKET) "]"
    | "(" FunctionArgumentList(EMethod.PARENTHESIS) ")"
    )*
  )
  {
    if (createNode) jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void IdentifierName(EMethod method) #IdentifierNameNode :
{
  Token t;
  jjtThis.setStartPosition(token);  
}
{
  (    t = < IDENTIFIER >
  )
  {
    jjtThis.init(method, t.image);
    jjtThis.setEndPosition(token);
  }
}

void FunctionArgumentList(EMethod method) #ArrayNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    [ Expression(null) ]
    (
      "," Expression(null)
    )*
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void FunctionTypeUnaryExpression(EMethod method) #void :
{
  boolean createNode;
}
{
  (
    (
      Literal(method)
    | 
      VariableWithOptionalScope(method)
    |
      (
        "(" Expression(method) ")"
      )
    )
  )
  {
  }
}

void VariableWithOptionalScope(EMethod method) #VariableNode :
{
  Token part1;
  Token part2 = null;
  jjtThis.setStartPosition(token);  
}
{
  (
    part1 = < IDENTIFIER > ["::" part2 = < IDENTIFIER >]
  )
  {
    if (part2 ==null)
      jjtThis.init(method, null, part1.image);
    else
      jjtThis.init(method, part1.image, part2.image);
    jjtThis.setEndPosition(token);
  }
}

void Number(EMethod method) #NumberNode :
{
  Token t;
  boolean isInt;
  jjtThis.setStartPosition(token);  
}
{
  (
    t = < Integer >
    {
      isInt = true;
    }
  | 
    t = < Float >
    {
      isInt = false;
    }
  )
  {
    jjtThis.init(method, t.image, isInt);
    jjtThis.setEndPosition(token);
  }
}

void String(EMethod method) #StringNode :
{
  Token t;
  char delimiter;
  jjtThis.setStartPosition(token);  
}
{
  (
    t = < SingleQuotedString >
    {
      delimiter = '\'';
    }
  | 
    t = < DoubleQuotedString >
    {
      delimiter = '"';
    }
  )
  {
    jjtThis.init(method, t.image, delimiter);
    jjtThis.setEndPosition(token);
  }
}

void Array(EMethod method) #ArrayNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    "["
    (
      "]"
    |
      (
        Expression(null)
        (
          "," Expression(null)
        )*
        "]"
      )
    )
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void Hash(EMethod method) #HashNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    "{"
    (
      "}"
    |
      (
        HashEntry(null)
        (
          "," HashEntry(null)
        )*
        "}"
      )
    )
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void HashEntry(EMethod method) #void :
{
}
{
  Literal(null) ":" Expression(null)
}

void Null(EMethod method) #NullNode :
{
  jjtThis.setStartPosition(token);  
}
{
  < Null >
  {
    {
      jjtThis.init(method);
      jjtThis.setEndPosition(token);
    }
  }
}

void Boolean(EMethod method) #BooleanNode :
{
  boolean b;
  jjtThis.setStartPosition(token);  
}
{
  (
    < True >
    {
      b = true;
    }
  | 
    < False >
    {
      b = false;
    }
  )
  {
    jjtThis.init(method, b);
    jjtThis.setEndPosition(token);
  }
}

void Log(EMethod method) #LogNode :
{
  ELogLevel logLevel;
  jjtThis.setStartPosition(token);  
}
{
  (
    (
      "\u00a7loginfo"
      {
        logLevel = ELogLevel.INFO;
      }
    | "\u00a7logerror"
      {
        logLevel = ELogLevel.ERROR;
      }
    | "\u00a7logdebug"
      {
        logLevel = ELogLevel.DEBUG;
      }
    | "\u00a7logwarn"
      {
        logLevel = ELogLevel.WARN;
      }
    )
    "(" Expression(null) ")"
  )
  {
    jjtThis.init(method, logLevel);
    jjtThis.setEndPosition(token);
  }
}

void Exception(EMethod method) #ExceptionNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (    < Exception > "(" Expression(null) ")"
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

void Function(EMethod method) #FunctionNode :
{
  jjtThis.setStartPosition(token);  
}
{
  (
    "->" "("
    (
      [ IdentifierName(null) ]
      (
        "," IdentifierName(null)
      )*
    )
    ")"
    (
      Block(null)
    )
  )
  {
    jjtThis.init(method);
    jjtThis.setEndPosition(token);
  }
}

// i Pattern.CASE_INSENSITIVE
// m Pattern.MULTILINE
// s Pattern.DOTALL
/*
void Regex(EMethod method) #RegexNode :
{
  Token t;
  Token flags = null;
}
{
  (
    t = < SlashQuotedString > [flags = < RegexFlags >]  )
  {
    jjtThis.init(method, t.image, flags == null ? StringUtils.EMPTY : flags.image);
  }
}
*/

void Literal(EMethod method) #void :
{
}
{
  Array(method)
| Hash(method)
| String(method)
| Number(method)
| Boolean(method)
| Null(method)
| Log(method)
| Function(method)
| Exception(method)
}

TOKEN :
{
  < DoubleQuotedString :
    "\""
    (
      ("\\" ~[ ])
    | ~[ "\\", "\"" ]
    )*
    "\"" >
| < SingleQuotedString :
    "'"
    (
      ("\\" ~[ ])
    | ~[ "\\", "'" ]
    )*
    "'" >
|
  < Integer : ([ "0"-"9" ])+ >
| 
  < Float :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)?
  | "." ([ "0"-"9" ])+ (< EXPONENT >)?
  | ([ "0"-"9" ])+ < EXPONENT > 
  >
| 
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
}

TOKEN :
{
  < With : "with" >
| 
  < Break : "break" >
|
  < Continue : "continue" >
|
  < If : "if" >
|
  < Else : "else" >
|
  < For : "for" >
|
  < While : "while" >
|
  < Do : "do" >
|
  < Try : "try" >
|
  < Catch : "catch" >
|
  < Throw : "throw" >
|
  < Switch : "switch" >
|
  < Case : "case" >
|
  < Default : "default" >
|
  < True : "true" >
|
  < False : "false" >
|
  < Null : "null" >
|
  < Exception : "exception" >  
| 
  < IDENTIFIER : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* >
}
