package de.xima.fc.form.expression.iface.evaluate;

import org.eclipse.jdt.annotation.NonNullByDefault;

import de.xima.fc.form.expression.node.ASTArrayNode;
import de.xima.fc.form.expression.node.ASTAssignmentExpressionNode;
import de.xima.fc.form.expression.node.ASTBooleanNode;
import de.xima.fc.form.expression.node.ASTBreakClauseNode;
import de.xima.fc.form.expression.node.ASTComparisonExpressionNode;
import de.xima.fc.form.expression.node.ASTContinueClauseNode;
import de.xima.fc.form.expression.node.ASTDoWhileLoopNode;
import de.xima.fc.form.expression.node.ASTDotPropertyNode;
import de.xima.fc.form.expression.node.ASTEmptyNode;
import de.xima.fc.form.expression.node.ASTEqualExpressionNode;
import de.xima.fc.form.expression.node.ASTExceptionNode;
import de.xima.fc.form.expression.node.ASTExpressionNode;
import de.xima.fc.form.expression.node.ASTForLoopNode;
import de.xima.fc.form.expression.node.ASTFunctionArgumentNode;
import de.xima.fc.form.expression.node.ASTFunctionClauseNode;
import de.xima.fc.form.expression.node.ASTFunctionNode;
import de.xima.fc.form.expression.node.ASTHashNode;
import de.xima.fc.form.expression.node.ASTIdentifierNameNode;
import de.xima.fc.form.expression.node.ASTIfClauseNode;
import de.xima.fc.form.expression.node.ASTLogNode;
import de.xima.fc.form.expression.node.ASTLosNode;
import de.xima.fc.form.expression.node.ASTNullNode;
import de.xima.fc.form.expression.node.ASTNumberNode;
import de.xima.fc.form.expression.node.ASTParenthesisExpressionNode;
import de.xima.fc.form.expression.node.ASTPostUnaryExpressionNode;
import de.xima.fc.form.expression.node.ASTPropertyExpressionNode;
import de.xima.fc.form.expression.node.ASTRegexNode;
import de.xima.fc.form.expression.node.ASTReturnClauseNode;
import de.xima.fc.form.expression.node.ASTScopeExternalNode;
import de.xima.fc.form.expression.node.ASTScopeGlobalNode;
import de.xima.fc.form.expression.node.ASTScopeManualNode;
import de.xima.fc.form.expression.node.ASTStatementListNode;
import de.xima.fc.form.expression.node.ASTStringCharactersNode;
import de.xima.fc.form.expression.node.ASTStringNode;
import de.xima.fc.form.expression.node.ASTSwitchClauseNode;
import de.xima.fc.form.expression.node.ASTTernaryExpressionNode;
import de.xima.fc.form.expression.node.ASTThrowClauseNode;
import de.xima.fc.form.expression.node.ASTTryClauseNode;
import de.xima.fc.form.expression.node.ASTUnaryExpressionNode;
import de.xima.fc.form.expression.node.ASTVariableDeclarationClauseNode;
import de.xima.fc.form.expression.node.ASTVariableNode;
import de.xima.fc.form.expression.node.ASTVariableTypeNode;
import de.xima.fc.form.expression.node.ASTWhileLoopNode;
import de.xima.fc.form.expression.node.ASTWithClauseNode;

@NonNullByDefault
public interface IFormExpressionVoidDataVisitor<T,E extends Throwable>
{
	public void visit(ASTExpressionNode node, T data) throws E;
	public void visit(ASTAssignmentExpressionNode node, T data) throws E;
	public void visit(ASTNumberNode node, T data) throws E;
	public void visit(ASTArrayNode node, T data) throws E;
	public void visit(ASTHashNode node, T data) throws E;
	public void visit(ASTNullNode node, T data) throws E;
	public void visit(ASTBooleanNode node, T data) throws E;
	public void visit(ASTVariableNode node, T data) throws E;
	public void visit(ASTStringNode node, T data) throws E;
	public void visit(ASTStatementListNode node, T data) throws E;
	public void visit(ASTIfClauseNode node, T data) throws E;
	public void visit(ASTForLoopNode node, T data) throws E;
	public void visit(ASTWhileLoopNode node, T data) throws E;
	public void visit(ASTTryClauseNode node, T data) throws E;
	public void visit(ASTSwitchClauseNode node, T data) throws E;
	public void visit(ASTDoWhileLoopNode node, T data) throws E;
	public void visit(ASTExceptionNode node, T data) throws E;
	public void visit(ASTThrowClauseNode node, T data) throws E;
	public void visit(ASTBreakClauseNode node, T data) throws E;
	public void visit(ASTContinueClauseNode node, T data) throws E;
	public void visit(ASTReturnClauseNode node, T data) throws E;
	public void visit(ASTLogNode node, T data) throws E;
	public void visit(ASTFunctionNode node, T data) throws E;
	public void visit(ASTUnaryExpressionNode node, T data) throws E;
	public void visit(ASTPropertyExpressionNode node, T data) throws E;
	public void visit(ASTIdentifierNameNode node, T data) throws E;
	public void visit(ASTWithClauseNode node, T data) throws E;
	public void visit(ASTFunctionClauseNode node, T data) throws E;
	public void visit(ASTEmptyNode node, T data) throws E;
	public void visit(ASTLosNode node, T data) throws E;
	public void visit(ASTRegexNode node, T data) throws E;
	public void visit(ASTTernaryExpressionNode node, T data) throws E;
	public void visit(ASTParenthesisExpressionNode node, T data) throws E;
	public void visit(ASTEqualExpressionNode node, T data) throws E;
	public void visit(ASTPostUnaryExpressionNode node, T data) throws E;
	public void visit(ASTComparisonExpressionNode node, T data) throws E;
	public void visit(ASTScopeExternalNode node, T data) throws E;
	public void visit(ASTVariableDeclarationClauseNode node, T data) throws E;
	public void visit(ASTScopeManualNode node, T data) throws E;
	public void visit(ASTScopeGlobalNode node, T data) throws E;
	public void visit(ASTVariableTypeNode node, T data) throws E;
	public void visit(ASTFunctionArgumentNode node, T data) throws E;
	public void visit(ASTStringCharactersNode node, T data) throws E;
	public void visit(ASTDotPropertyNode node, T data) throws E;
}
