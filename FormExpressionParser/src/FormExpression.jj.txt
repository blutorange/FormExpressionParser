PARSER_BEGIN(FormExpressionParser)
package de.xima.fc.form.expression.grammar;
import de.xima.fc.form.expression.enums.EMethod;
import de.xima.fc.form.expression.node.*;

/** Formcycle expression language.
    http://ramkulkarni.com/blog/handling-some-of-the-warnings-and-errors-generated-by-javacc/
 */
public class FormExpressionParser
{
  /** Main entry point. */
  public static void main(String args []) throws ParseException
  {
    System.out.println("Use as a library...");
  }
}

PARSER_END(FormExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/** Root for non-embedded code. */
Node Plain() #ExpressionNode :
{
}
{
  (
    (
      Expression(null) < EOF >
    )
  | < EOF >
  )
  {
    if (jjtThis.jjtGetNumChildren() > 0) jjtThis.init(null);
    return jjtThis;
  }
}

void Statement(EMethod method) #void :
{
}
{
  Expression(method) ";"
}

void Expression(EMethod method) #void :
{
}
{
  EqualTypeExpression(method)
}

void EqualTypeExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
  //EMethod nextMethod = createNode? null : method;
}
{
  (
    DoubleBarExpression(null)
    (
      (
        "=" DoubleBarExpression(EMethod.EQUAL)
      )
    |
      (
        "+=" DoubleBarExpression(EMethod.PLUS_EQUAL)
      )
    |
      (
        "-=" DoubleBarExpression(EMethod.DASH_EQUAL)
      )
    |
      (
        "**=" DoubleBarExpression(EMethod.DOUBLE_STAR_EQUAL)
      )
    |
      (
        "*=" DoubleBarExpression(EMethod.STAR_EQUAL)
      )
    |
      (
        "/=" DoubleBarExpression(EMethod.SLASH_EQUAL)
      )
    |
      (
        "%=" DoubleBarExpression(EMethod.PERCENT_EQUAL)
      )
    |
      (
        "<<=" DoubleBarExpression(EMethod.DOUBLE_ANGLE_OPEN_EQUAL)
      )
    |
      (
        ">>=" DoubleBarExpression(EMethod.DOUBLE_ANGLE_CLOSE_EQUAL)
      )
    |
      (
        "&&=" DoubleBarExpression(EMethod.DOUBLE_AMPERSAND_EQUAL)
      )
    |
      (
        "||=" DoubleBarExpression(EMethod.DOUBLE_BAR_EQUAL)
      )
    |
      (
        "&=" DoubleBarExpression(EMethod.AMPERSAND_EQUAL)
      )
    |
      (
        "^=" DoubleBarExpression(EMethod.CIRCUMFLEX_EQUAL)
      )
    |
      (
        "|=" DoubleBarExpression(EMethod.BAR_EQUAL)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

/*
void TrinaryExpression() #TrinaryExpressionNode :
{
}
{
  Expression() "?" Expression() ":" Expression()
  {
    jjtThis.init();
  }
}
*/

void DoubleBarExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    DoubleAmpersandExpression(null)
    (
      "||" DoubleAmpersandExpression(EMethod.DOUBLE_BAR)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void DoubleAmpersandExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
   boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    BarExpression(null)
    (
      "&&" BarExpression(EMethod.DOUBLE_AMPERSAND)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void BarExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    CircumflexExpression(null)
    (
      "|" CircumflexExpression(EMethod.BAR)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void CircumflexExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    AmpersandExpression(null)
    (
      "^" AmpersandExpression(EMethod.CIRCUMFLEX)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void AmpersandExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    DoubleEqualTypeExpression(null)
    (
      "&" DoubleEqualTypeExpression(EMethod.AMPERSAND)
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void DoubleEqualTypeExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    AngleTypeExpression(null)
    (
      (
        "===" AngleTypeExpression(EMethod.TRIPLE_EQUAL)
      )
    |
      (
        "==" AngleTypeExpression(EMethod.DOUBLE_EQUAL)
      )
    |
      (
        "!=" AngleTypeExpression(EMethod.EXCLAMATION_EQUAL)
      )
    |
      (
        "!==" AngleTypeExpression(EMethod.EXCLAMATION_DOUBLE_EQUAL)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void AngleTypeExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    PlusLikeExpression(null)
    (
      (
        "<" PlusLikeExpression(EMethod.ANGLE_OPEN)
      )
    |
      (
        ">" PlusLikeExpression(EMethod.ANGLE_CLOSE)
      )
    |
      (
        "<=" PlusLikeExpression(EMethod.ANGLE_OPEN_EQUAL)
      )
    |
      (
        ">=" PlusLikeExpression(EMethod.ANGLE_CLOSE_EQUAL)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void PlusLikeExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
   boolean createNode;
//EMethod nextMethod = createNode? null : method;
}
{
  (
    StarLikeExpression(null)
    (
      (
        "+" StarLikeExpression(EMethod.PLUS)
      )
    |
      (
        "-" StarLikeExpression(EMethod.DASH)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void StarLikeExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
//  EMethod nextMethod = createNode? null : method;
}
{
  UnaryExpression(null)
  (
    (
      DoubleStarExpression(null)
    |
      (
        "*" UnaryExpression(EMethod.STAR)
      )
    |
      (
        "/" UnaryExpression(EMethod.SLASH)
      )
    |
      (
        "%" UnaryExpression(EMethod.PERCENT)
      )
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void UnaryExpression(EMethod method) #ExpressionNode(unaryMethod != null) :
{
  EMethod unaryMethod = null;
}
{
  (
    (
      "++" UnaryExpression(null)
      {
        unaryMethod = EMethod.DOUBLE_PLUS_PREFIX;
      }
    )
  |
    (
      "--" UnaryExpression(null)
      {
        unaryMethod = EMethod.DOUBLE_DASH_PREFIX;
      }
    )
  |
    (
      "+" UnaryExpression(null)
      {
        unaryMethod = EMethod.PLUS_UNARY;
      }
    )
  |
    (
      "-" UnaryExpression(null)
      {
        unaryMethod = EMethod.DASH_UNARY;
      }
    )
  |
    (
      "!" UnaryExpression(null)
      {
        unaryMethod = EMethod.EXCLAMATION;
      }
    )
  | DoubleStarExpression(method)
  )
  {
    if (unaryMethod != null) jjtThis.init(method, unaryMethod);
  }
}

void DoubleStarExpression(EMethod method) #ExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode;
}
{
  (
    DotExpression(null)
    (
      (
        "**" UnaryExpression(EMethod.CIRCUMFLEX)
      )?
    )
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void DotExpression(EMethod method) #DotExpressionNode(createNode = method != null || jjtree.nodeArity() > 1) :
{
  boolean createNode = true;
}
{
  (
    FunctionTypeUnaryExpression(null)
    (
      "." FunctionCall(null) 
    )*
  )
  {
    if (createNode) jjtThis.init(method);
  }
}

void FunctionTypeUnaryExpression(EMethod method) #void :
{
}
{
  (
    Literal(method)
  |
    (
      FunctionCall(method)
    )
  |
    (
      "(" Expression(method) ")"
    )
  )
}

void FunctionCall(EMethod method) #void :
{
}
{
  (
    LOOKAHEAD(< IDENTIFIER > "(")
    ParenthesesFunction(method)
  | 
    PlainFunction(method)
  )
}

void ParenthesesFunction(EMethod method) #ParenthesesFunction :
{
  Token t;
}
{
  (
    t = < IDENTIFIER > "(" FunctionArgumentList(null) ")"
  )
  {
    jjtThis.init(method, t.image);
  }
}

void FunctionArgumentList(EMethod method) #void :
{
}
{
  (
    [ Expression(method) ]
    (
      "," Expression(method)
    )*
  )
}


void Number(EMethod method) #NumberNode :
{
  Token t;
  boolean isInt;
}
{
  (
    t = < Integer >
    {
      isInt = true;
    }
  | 
    t = < Float >
    {
      isInt = false;
    }
  )
  {
    jjtThis.init(method, t.image, isInt);
  }
}

void String(EMethod method) #StringNode :
{
  Token t;
  char delimiter;
}
{
  (
    "'" (t = < SingleQuotedString >) "'" { delimiter = '\''; }
  | 
    "\"" (t = < DoubleQuotedString >) "\"" { delimiter = '"'; }
  )
  {
    jjtThis.init(method, t.image, delimiter);
  }
}

void Array(EMethod method) #ArrayNode :
{
}
{
  (
    "["
    (
      "]"
    |
      (
        Expression(null)
        (
          "," Expression(null)
        )*
        "]"
      )
    )
  )
  {
    jjtThis.init(method);
  }
}

void Hash(EMethod method) #HashNode :
{
}
{
  (
    "{"
    (
      "}"
    |
      (
        HashEntry(null)
        (
          "," HashEntry(null)
        )*
        "}"
      )
    )
  )
  {
    jjtThis.init(method);
  }
}

void HashEntry(EMethod method) #void :
{
}
{
  PlainFunction(method) ":" Expression(method)
}

/**
 * Literal for the null object.
 */
void Null(EMethod method) #NullNode :
{
}
{
  "\u00a7null"
  {
    {
      jjtThis.init(method);
    }
  }
}

void Boolean(EMethod method) #BooleanNode :
{
  boolean b;
}
{
  (
    "\u00a7true"
    {
      b = true;
    }
  | 
    "\u00a7false"
    {
      b = false;
    }
  )
  {
    jjtThis.init(method, b);
  }
}

void Literal(EMethod method) #void :
{
}
{
  Array(method)
| Hash(method)
| String(method)
| Number(method)
| Boolean(method)
| Null(method)
}

void PlainFunction(EMethod method) #PlainFunction :
{
  Token t;
}
{
  t = < IDENTIFIER >
  {
    jjtThis.init(method, t.image);
  }
}

TOKEN :
{
  < DoubleQuotedString :
    "\""
    (
      ("\\" ~[ ])
    | ~[ "\\", "\"" ]
    )*
    "\"" >
| < SingleQuotedString :
    "'"
    (
      ("\\" ~[ ])
    | ~[ "\\", "'" ]
    )*
    "'" >
| 
  < Integer : ([ "0"-"9" ])+ >
| 
  < Float :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)?
  | "." ([ "0"-"9" ])+ (< EXPONENT >)?
  | ([ "0"-"9" ])+ < EXPONENT > 
  >
| 
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
}

TOKEN :
{
  < IDENTIFIER : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* >
}
