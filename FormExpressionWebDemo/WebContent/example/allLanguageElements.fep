// Local and global variables.

global scope {        // Global variables are introduced in
  var globalVariable; // their own block, which should be at
}                     // the beginning, but does not have to be.
globalVariable2 = 0;  // In non-strict mode, global variables
                      // are automatically declared upon assignment.

scope myScope {       // You can define your own scopes to
  var scopedVariable; // prevent confusion amongst different
}                     // variables.
myScope::scopedVariable = 2; // Scoped variables are accessed via :: notation.

scope myScope {       // Scoped function can be
  function sum(a,b) { // declared in directly in
    a+b;              // the scope header block.
  }
}
function myScope::multitply(a,b) { // Or outside the header
  a*b;                             // block as well, whatever
}                                  // suits you better.

if (true) {           // Local variables are
  var i = 0;          // block-scoped. Do not
  while (i<10) {      // forget to prepend them
    var name = "Max"; // with var, or they will be
    ++i;              // interpreted as global variables.
  }                   // In strict mode, you need to declare
}                     // them or a parse exception will be thrown.
// Literals
null;            // Null.
true == !false;  // Booleans.
1 == 1.0 == 1E1; // All numbers are doubles. Doubles have got 52 bits to represent integers exactly.
"asd" == 'asd';  // No difference between the two types of quoting. I might add inline expressions, though.
#^0x\d+$#i;      // Regexp with the case-insensitive flag.

// Compound literals.
[1,false,"asd",[10]];   // Arrays can contain any object.
{"foo": 1, true: null}; // Hashes may contain any object.
{foo: 1, bar: 2};       // Hash keys do not require string quotes.

// Special objects.
exception("myexception");       // Exception object, can the thrown.
lambda = (foo)=>{return foo;};  // Lamba object.
lambda(42);                     // Calling a lambda object.
lambda.call(null, 42);          // apply(this, arg1, arg2, ...)
lambda.apply(null, [42]);       // call(this, argsArray)
 
// Logging
// A custom logger can be set when constructing an IEvaluationContext.
loginfo("debug"); // Log message at log level debug.
loginfo("info"); // Log message at log level info.
loginfo("warn"); // Log message at log level warn.
loginfo("error"); // Log message at log level error.

// Variables are created automatically in non-strict mode.
variable = 1; // Default global scope
yourScope::variable = 2; // Custom scope.
variable + yourScope::variable; // => 3

// Operators
(1 + 2) * 3;      // Operators work as expected.
"anne" > "andre"; // Operator predence is like javascript.
"string";       // True.
true ? 42 : 0;    // Ternary if-else operator.

// Control structures.

// Plain for loop. i++ will be implemented soon.
for (i = 0; i < 10; i+=1) {
  loginfo(i);
}

// Enhanced for loop.
for (i in [1,2,3]) loginfo(i); // => 1 2 3
for (i in 3) loginfo(i);       // => 1 2 3
for (i in "123") loginfo(i);   // => 1 2 3
for (key in {1:null,2:null,3:null})
  loginfo(key);              // => 1 2 3

// While loop, Do-While loop
while (false) ()=>{};
do 1+2; while (false);

// Switch
name = "tom";
switch (name) {
  case "max":
  case "tom":
  case "julia":
    "known name";
    break;
  default:
    throw exception("unknown name");
}

// Labels
// Supported, but remember good coding styles!
while<outer> (true) {
  for<inner> (i in 10) {
    if (i > 5) break outer;
    continue inner;
  }
}

// Error handling.
try {
  null.toLowerCase();
}
catch (e) {
  logerror(e);
}

// Functions
function foo(bar, baz) {
  return (bar != null ? bar : "") + (baz != null ? baz : "");
}
foo(1,2);      // => 3
foo("1", "2"); // => "12"
foo();         // => null

// With block
/*
 * Default scopes need to be supported for
 * accessing unqualified form fields, but
 * I recommend you always use qualified names.
 */
someScope::someVar = 0;
anotherScope::someVar = 1;
with (someScope, anotherScope) {
  someVar; // => 1  Resolves to anotherScope::someVar
}
with (anotherScope, someScope) {
  someVar; // => 0  Resolves to someScope::someVar
}
with (someScope) {
  someVar = 2;        // Sets a new local variable.
  someVar;            // => 2 
  someScope::someVar; // => 0 The scoped variable is unaffected.
}

// Comments
// Single line comment
19 + /* Block comments
can be used as well*/ 23;